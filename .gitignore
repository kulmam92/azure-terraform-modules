# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# terragrunt working directory
**/.terragrunt-cache/*

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so
*.pyc
**/build/
**/dist/
**/doc/build/

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite
**/logs/*

# OS generated files #
######################
._*
.tox
*.egg-info
.eggs
*.retry

# Vagrant artifacts
.vagrant
.vscode/settings.json
components/StandardAKS/test/fixture/private_ssh_key
components/StandardAKS/test/fixture/.terraform.lock.hcl
